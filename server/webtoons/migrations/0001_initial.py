<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
# Generated by Django 4.1.1 on 2022-09-16 02:10
=======
# Generated by Django 4.1.1 on 2022-09-16 02:17
>>>>>>> 86fecf2 (Fix game api ver_0.5)
=======
# Generated by Django 4.1 on 2022-09-19 04:41
>>>>>>> f807105 (fix: makemigrations 다시)
=======
# Generated by Django 4.1.1 on 2022-09-22 08:48
>>>>>>> c4b2854 (feat: 웹툰 이미지 검색 api 구현)
=======
# Generated by Django 4.1.1 on 2022-09-26 07:50
>>>>>>> c9803bc (fix : profile 수정, email,nickname 중복확인 수정)
=======
# Generated by Django 4.1.1 on 2022-09-27 01:49
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            name='Author',
=======
            name="Author",
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
            fields=[
                ("author_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Day",
            fields=[
                ("day_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
<<<<<<< HEAD
            name='Genre',
            fields=[
                ('genre_id', models.AutoField(primary_key=True, serialize=False)),
                ('genre_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('platform_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
<<<<<<< HEAD
                ('tag_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
<<<<<<< HEAD
=======
                ("tag_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
>>>>>>> 86fecf2 (Fix game api ver_0.5)
=======
>>>>>>> f807105 (fix: makemigrations 다시)
            ],
        ),
        migrations.CreateModel(
            name='Webtoon',
            fields=[
<<<<<<< HEAD
                ('webtoon_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('summary', models.TextField(blank=True)),
                ('thumbnail', models.CharField(max_length=1000)),
                ('page', models.CharField(max_length=1000)),
                ('adult', models.BooleanField()),
                ('image_type1', models.FloatField(null=True)),
                ('image_type2', models.FloatField(null=True)),
                ('image_type3', models.FloatField(null=True)),
                ('image_type4', models.FloatField(null=True)),
                ('image_type5', models.FloatField(null=True)),
                ('image_type6', models.FloatField(null=True)),
                ('view_count', models.IntegerField(default=0)),
                ('authors', models.ManyToManyField(related_name='author_webtoons', to='webtoons.author')),
                ('days', models.ManyToManyField(related_name='day_webtoons', to='webtoons.day')),
                ('genres', models.ManyToManyField(related_name='genre_webtoons', to='webtoons.genre')),
                ('platforms', models.ManyToManyField(related_name='platform_webtoons', to='webtoons.platform')),
                ('tags', models.ManyToManyField(related_name='tag_webtoons', to='webtoons.tag')),
<<<<<<< HEAD
=======
=======
            name="Author",
=======
            name='Author',
>>>>>>> c9803bc (fix : profile 수정, email,nickname 중복확인 수정)
            fields=[
                ('author_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('day_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DrawClassify',
=======
            name="DrawClassify",
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
            fields=[
                ("classify_id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(default="", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                ("genre_id", models.AutoField(primary_key=True, serialize=False)),
                ("genre_type", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Platform",
            fields=[
                ("platform_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                ("tag_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Webtoon",
            fields=[
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> c4b2854 (feat: 웹툰 이미지 검색 api 구현)
=======
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
                ("webtoon_id", models.AutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=100)),
                ("summary", models.TextField(blank=True)),
                ("thumbnail", models.CharField(max_length=1000)),
                ("page", models.CharField(max_length=1000)),
                ("adult", models.BooleanField()),
                ("image_type1", models.FloatField(null=True)),
                ("image_type2", models.FloatField(null=True)),
                ("image_type3", models.FloatField(null=True)),
                ("image_type4", models.FloatField(null=True)),
                ("image_type5", models.FloatField(null=True)),
                ("image_type6", models.FloatField(null=True)),
                ("view_count", models.IntegerField(default=0)),
<<<<<<< HEAD
<<<<<<< HEAD
=======
                ("similar_webtoons", models.CharField(default="", max_length=2000)),
>>>>>>> c4b2854 (feat: 웹툰 이미지 검색 api 구현)
=======
                ("rating", models.IntegerField(default=0)),
                ("similar_webtoons", models.CharField(default="", max_length=2000)),
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
                (
                    "authors",
                    models.ManyToManyField(
                        related_name="author_webtoons", to="webtoons.author"
                    ),
                ),
                (
                    "days",
                    models.ManyToManyField(
                        related_name="day_webtoons", to="webtoons.day"
                    ),
                ),
                (
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
                    "draw_classifies",
                    models.ManyToManyField(
                        related_name="classify_webtoons", to="webtoons.drawclassify"
                    ),
                ),
                (
<<<<<<< HEAD
>>>>>>> c4b2854 (feat: 웹툰 이미지 검색 api 구현)
=======
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
                    "genres",
                    models.ManyToManyField(
                        related_name="genre_webtoons", to="webtoons.genre"
                    ),
                ),
                (
                    "platforms",
                    models.ManyToManyField(
                        related_name="platform_webtoons", to="webtoons.platform"
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        related_name="tag_webtoons", to="webtoons.tag"
                    ),
                ),
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 86fecf2 (Fix game api ver_0.5)
=======
>>>>>>> f807105 (fix: makemigrations 다시)
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('rating', models.FloatField(validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(5)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ratings', to=settings.AUTH_USER_MODEL)),
                ('webtoon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webtoon_ratings', to='webtoons.webtoon')),
=======
=======
                ('webtoon_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('summary', models.TextField(blank=True)),
                ('thumbnail', models.CharField(max_length=1000)),
                ('page', models.CharField(max_length=1000)),
                ('adult', models.BooleanField()),
                ('image_type1', models.FloatField(null=True)),
                ('image_type2', models.FloatField(null=True)),
                ('image_type3', models.FloatField(null=True)),
                ('image_type4', models.FloatField(null=True)),
                ('image_type5', models.FloatField(null=True)),
                ('image_type6', models.FloatField(null=True)),
                ('view_count', models.IntegerField(default=0)),
                ('similar_webtoons', models.CharField(default='', max_length=2000)),
                ('authors', models.ManyToManyField(related_name='author_webtoons', to='webtoons.author')),
                ('days', models.ManyToManyField(related_name='day_webtoons', to='webtoons.day')),
                ('draw_classifies', models.ManyToManyField(related_name='classify_webtoons', to='webtoons.drawclassify')),
                ('genres', models.ManyToManyField(related_name='genre_webtoons', to='webtoons.genre')),
                ('platforms', models.ManyToManyField(related_name='platform_webtoons', to='webtoons.platform')),
                ('tags', models.ManyToManyField(related_name='tag_webtoons', to='webtoons.tag')),
>>>>>>> c9803bc (fix : profile 수정, email,nickname 중복확인 수정)
=======
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
            ],
        ),
        migrations.CreateModel(
            name="Rating",
            fields=[
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
                ("rating_id", models.AutoField(primary_key=True, serialize=False)),
                ("created_time", models.DateTimeField(auto_now_add=True)),
                (
                    "rating",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.5),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_ratings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "webtoon",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="webtoon_ratings",
                        to="webtoons.webtoon",
                    ),
                ),
<<<<<<< HEAD
>>>>>>> c4b2854 (feat: 웹툰 이미지 검색 api 구현)
=======
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('rating', models.FloatField(validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(5)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ratings', to=settings.AUTH_USER_MODEL)),
                ('webtoon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webtoon_ratings', to='webtoons.webtoon')),
>>>>>>> c9803bc (fix : profile 수정, email,nickname 중복확인 수정)
=======
>>>>>>> c5812ab (feat : rating model추가, rating views 수정)
            ],
        ),
    ]
